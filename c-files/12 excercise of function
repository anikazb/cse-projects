1. Write a program in C to show the simple structure of a function.Expected Output :The total is :  11  
//no return no parameter
#include <stdio.h>
//void is no return type
void anika() //function name
{ 
    int a=9,b=2,sum; 
  sum=a+b;
    printf("The total is: %d",sum);

}
int main()
{
   anika(); //using semi-colon means by name function calling
    return 0;
}
//The total is: 11

=== Code Execution Successful ===



2. Write a program in C to find the square of any number using the function.
Test Data :
Input any number for square : 20
Expected Output :The square of 20 is : 400.00 
//with return no parameter
#include<stdio.h>
#include<math.h>
int samia()
{
    int x,power;
    printf("Enter the number: ");
    scanf("%d",&x);
    power=pow(x,2);
    return power;

}
int main()
{
 int result;
 result=samia();
 printf("The square of x is:%d ",result);
 
    return 0;
}
/*
Enter the number: 20
The square of x is:400  */

=== Code Execution Successful ===



3. Write a program in C to swap two numbers using a function.
Test Data :
Input 1st number : 2
Input 2nd number : 4
Expected Output :
Before swapping: n1 = 2, n2 = 4                     
After swapping: n1 = 4, n2 = 2 
//no return no parameter
#include<stdio.h>
void farwa()
{
 int swap,n1=2,n2=4;
 printf("1st number n1 : 2\n 2nd number n2 : 4\n");
 swap=n1;
 n1=n2;
 n2=swap;
 printf("After swapping : n1 = %d , n2 = %d",n1,n2);
    
}
int main()
{
 farwa()   ;
    return 0;
}
/*
1st number n1 : 2
 2nd number n2 : 4
After swapping : n1 = 4 , n2 = 2   */

=== Code Execution Successful ===



4. Write a program in C to check if a given number is even or odd using the function.
Test Data :
Input any number : 5
Expected Output :
 The entered number is odd.  
 //no return no parameter
 #include<stdio.h>
 void sejuti()
 {
   int a;
   printf("Input any number : ");
   scanf("%d",&a);
     if(a%2==0)
     {
         printf("The entered number is even.");
     }
     else
     {
       printf("The entered number is odd.");  
     }
    
 }
 int main()
{
    sejuti()  ;                            
    return 0;
}
/* 
Input any number : 5
The entered number is odd.   */

=== Code Execution Successful ===



5. Write a program in C to find the sum of the series 1!/1+2!/2+3!/3+4!/4+5!/5 using the function.
Expected Output :
 The sum of the series is : 34 
 //rules of this pattern= bigger then 1 and factorial=1 constant ,factorial=fact+fact*num which is bigger thn 1.
 //with return with parameter
#include<stdio.h>
int boby(int n) //n for range
{                   //i = loop 
   int fact=1,i; // fact=1[const] 0!=1 
   for(i=0;i<n;i++)
   {
       fact=fact+fact*i;
     
   }
  
    return fact;
}
int main()
{
    int x;
    printf("Enter number : ");
    scanf("%d",&x);
  /*  int factorial=boby(x);
    printf("here =%d\n",factorial);//5!/5=24 ,24*5=120
    so no need to store bcz no addition is here only call function by name*/
    boby(x);
    printf("%d\n",boby(1)/1);
     printf("%d\n",boby(2)/2);
     printf("%d\n",boby(3)/3);
     printf("%d\n",boby(4)/4);
      printf("%d\n",boby(5)/5); 
       printf("%d\n",boby(6)/6); 
    int sum;
    sum=boby(1)/1+boby(2)/2+boby(3)/3+boby(4)/4+boby(5)/5+boby(6)/6;
    printf("SUM = %d\n",sum);
    
      
    return 0;
}/*
Enter number : 6
1
1
2
6
24
120
SUM = 154
*/

=== Code Execution Successful ===
*7. Write a program in C to check whether a number is a prime number or not using the function.
Test Data :Input a positive number : 5
Expected Output :The number 5 is a prime number. */
//with return with parameter
#include<stdio.h>
int brinto(int n)
{
    int i;
    for(i=2;i<=n/2;i++)
    {
        if(n%2==0)
        {
            return 0;
        }
    }
    return 1;
}
int main()
{
   int n,prime;
   printf("Input the number : ");
   scanf("%d",&n);
   prime=brinto(n);
   if(prime==1)
   {
       printf("prime");
   }
   else
   {
       printf("not prime");
   }
   return 0;
}

Input the number : 6
not prime

=== Code Execution Successful ===

/*9. Write a program in C to check  Perfect numbers using the function.
Test Data :
Input any number: 371
Expected Output :                    
 The 371 is not a Perfect number. */  
 //with return with parameter
 #include<stdio.h>
 int tesla(int n)
 {
     int i,sum=0;
     for(i=1;i<n;i++) //3x7=21 
                      //21x1=21
     {
         if(n%i==0)
         {
             sum=sum+i;
         }
     }
    return (n==sum) ;
 }
 int main ()
 {
     int n,perfect;
     printf("Input the value : ");
     scanf("%d",&n);
     perfect=tesla(n);
     if(perfect)
     {
         printf("perfect");
     }
     else
     {
         printf("not perfect");
     }
     
     return 0;
 }
 Input the value : 28
perfect

=== Code Execution Successful ===

/*10. Write a program in C to print all perfect numbers in a given range using the function.
Test Data :
Input lowest search limit of perfect numbers : 1
Input highest search limit of perfect numbers : 100
Expected Output :
 The perfect numbers between 1 to 100 are :                 
 6   28  */
 //insted of using nested loop,use three term function easily
 //with return with parameter
 #include<stdio.h>
 //check perfect number
int turbo(int n)
{
    int i,sum=0;
    for(i=1;i<n;i++) //3x7=21
    {                //21x1=21 
        if(n%i==0)
        {
            sum=sum+i;
        }
    }
    return (n==sum);
}
//perfect number among range
void tesla(int a,int b)
{
    int i;
    for(i=a;i<=b;i++)
    {
        if(turbo(i))
        {
            printf("perfect : %d \n",i);
        }
     
    }
   // return 0;
}
int main()
{
    int a,b;
    printf("Input lowest search limit of perfect numbers :");
   scanf("%d",&a) ;
    printf("Input highest search limit of perfect numbers :");
      scanf("%d",&b) ;
      tesla(a,b);
      return 0;
}


Input lowest search limit of perfect numbers :1
Input highest search limit of perfect numbers :2000
perfect : 6 
perfect : 28 
perfect : 496 


=== Code Execution Successful ===

/*11. Write a program in C to print all prime numbers in a given range using the function.
Test Data :
Input lowest search limit of prime numbers : 1
Input highest search limit of   prime numbers : 100
 */
 //insted of using nested loop,use three term function easily
 //with return with parameter
 #include<stdio.h>
 //check prime number
 int venus(int n)
 {
    int i;
    for(i=2;i<=n/2;i++)
    {
        if(n%2==0)
        {
            return 0;
        }
    }
    return 1;
 }
 void saturn(int a,int b)
 {
     int i;
     for(i=a;i<=b;i++)
     {
         if(venus(i)==1)
         {
             printf("prime : %d\n",i);
         }
     }
 }
 int main()
 {
     int a,b;
     printf("Input lowest search limit of prime numbers : ");
     scanf("%d",&a);
 printf("Input highest search limit of   prime numbers : ");
      scanf("%d",&b);
      saturn(a,b);
      return 0;
 }
 
Input lowest search limit of prime numbers : 2
Input highest search limit of   prime numbers : 15
prime : 2
prime : 3
prime : 5
prime : 7
prime : 9
prime : 11
prime : 13
prime : 15


=== Code Execution Successful ===
/*
3. Write a function to obtain the first 10 numbers of a Fibonacci sequence.
Pass a value as a parameter.
Input: 10
Output: 0 1 1 2 3 5 8 13 21 34
In a Fibonacci sequence the sum of two successive terms gives the third term. */
//with return , with  parameter
#include<stdio.h>
int Fibo(int n)
{
int i,nexterm, n1=0,n2=1;
//1st num =n1=0 , 2nd num =n2=1, 3rd num=i=3=?

printf(" The first and second value is : %d %d\n",n1,n2);

printf("Secquence of fibonacci : \n");

    for(i=3;i<=n;++i)
    //0+1=1,1+1=2,1+2=3 pre increment ++i
    { 
        nexterm=n1+n2;
printf(" %d\t",nexterm);

  n1=n2;  //pre incr = pre swap(store oppsite dicrection wise)
  n2=nexterm;
    }
    return 0;
}
int main ()
{
    int n;
    printf(" The value : ");
    scanf("%d",&n);
    Fibo(n);
    return 0;
}

 The value : 10
 The first and second value is : 0 1
Sequence of fibonacci : 
 1	 2	 3	 5	 8	 13	 21	 34	

=== Code Execution Successful ===

/*4. Write 4 different functions for calculating the area of a triangle, rectangle, square and circle. */
#include<stdio.h>
#include<math.h>
double circle(double r)
{
    double pi=3.1416,area1;
    area1=pi*pow(r,2);
    return area1;
}
double square(double a)
{
    double area2;
    area2=a*a;
    return area2;
}
double triangle(double b,double h)
{
    double area3;
    area3=(b*h)/2;
    return area3;
}
double rectangle(double c,double d)
{
    double area4;
    area4=c*d;
    return area4;
}
int main()
{
    double  a,r,b,h,c,d,result,sum,root,total;
    printf("Input value 1 : ");
    scanf("%lf",&r);
    result=circle(r);
    printf("Area of circle : %lf\n",result);
    
     printf("Input value 2 : ");
    scanf("%lf",&a); //never use any space in "%f%f"
    sum=square(a);
    printf("Area of square : %lf\n",sum); 
    
     printf("Input value 3 : ");
    scanf("%lf%lf",&b,&h); 
    root=triangle(b,h);
    printf("Area of triangle : %lf\n",root); 
    
    printf("Input value 4 : ");
    scanf("%lf%lf",&c,&d); 
    total=rectangle(c,d);
    printf("Area of rectangle : %lf\n",total); 
    return 0;
}

Input value 1 : 3
Area of circle : 28.274400
Input value 2 : 4
Area of square : 16.000000
Input value 3 : 7
9
Area of triangle : 31.500000
Input value 4 : 2
5
Area of rectangle : 10.000000


=== Code Execution Successful ===






 
 
 
 
 

