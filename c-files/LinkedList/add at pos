//linked list
#include<stdio.h>
#include<stdlib.h>

//node deffination
struct node
{
    int data;
    struct node *link;
};

//create node
struct node *create_node(int data)
{
    struct node *new_node=malloc(sizeof(struct node));
    new_node->data=data;
    new_node->link=NULL;
    return new_node;
}
//insert at end
void add_end(struct node **head,int data)
{
    struct node *new_node=create_node(data);
    if(*head==NULL)
    {
        *head=new_node;
    }
    else
    {
        struct node *temp=*head;
        while(temp->link!=NULL)
        {
            temp=temp->link;
        }
        temp->link=new_node;
    }
}

//insert at beggining
void add_at_beg(struct node **head,int data)
{
    struct node *new_node=create_node(data);
    new_node->link=*head;
    *head=new_node;
}

//add at pos
void add_at_pos(struct node **head,int data,int pos)
{
    //add at begg
    struct node *new_node=create_node(data);
    if(pos==1)
   { new_node->link=*head;
    *head=new_node;
    return ;
   }

    struct node *temp = *head;
    for (int i = 1; i < pos - 1; i++) {
        if (temp == NULL) {
            printf("Position out of bounds\n");
            return;
        }
        temp = temp->link;
    }

    new_node->link = temp->link;                 // Link new node to the next node
    temp->link = new_node;                       // Link previous node to the new node
}



//traverse display count
void traverse_display(struct node *head)
{
    int count=0;
    struct node *temp=head;
    while(temp!=NULL)
    {
        printf("%d\n",temp->data);
      temp=temp->link;  
      count++;
    }
    printf("count=%d\n ",count);
}
int main()
{
    struct node *head=NULL;
     add_end(&head,34);
      add_end(&head,4);
    add_at_beg(&head,3);
    add_at_pos(&head,00,2);
    traverse_display(head);
    return 0;
}


/tmp/QxkDoCK5rL.o
3
0
34
4
count=4
 

=== Code Execution Successful ===